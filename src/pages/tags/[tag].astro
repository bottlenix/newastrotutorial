---
/*
  See this page for more information on how to create dynamic routes
  to build this tag page:
  https://docs.astro.build/en/tutorial/5-astro-api/2/
*/

import BaseLayout from '../../layouts/BaseLayout.astro';
import BlogPost from '../../components/BlogPost.astro';

/*
    The getStaticPaths function returns an array of page routes,
    and all of the pages at those routes will use the same template
    defined in the file.

    The getStaticProps function returns an object with the props
    that will be passed to the template when the page is rendered.
    The props object can be any shape, but it must be serializable
    to JSON.
*/
export async function getStaticPaths() {

  const allPosts = Object.values(import.meta.glob('../posts/*.md', { eager: true }));

  /*
    The following code creates an array of unique tags from all of the posts.
    The array is then mapped to an array of objects, where each object has
    a params key with a tag key that is the tag name, and a props key with
    a posts key that is an array of posts that have that tag.
    The following line goes through each Markdown post, one by one, and
    combines each array of tags into one single larger array. Then, it makes
    a new `Set` from all the individual tags it found (to ignore repeated values).
    Finally, it turns that set into an array (with no duplications), that you
    can use to show a list of tags on your page.
  */
  const uniqueTags = [...new Set(allPosts.map((post: any) =>
      post.frontmatter.tags || []).flat())];

  /*
    The following code maps the unique tags to an array of objects, where each
    object has a params key with a tag key that is the tag name, and a props key
    with a posts key that is an array of posts that have that tag.
    A `getStaticPaths` function should always return a list of objects containing params
    (what to call each page route) and optionally any props (data that you want to pass
    to those pages).  Now, we generate this list of objects automatically using our
    `uniqueTags` array to define each parameter.
  */
  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts.filter((post: any) =>
        Array.isArray(post.frontmatter.tags) && post.frontmatter.tags.includes(tag));
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });
}

const { tag }   = Astro.params;
const { posts } = Astro.props;
---

<BaseLayout pageTitle={tag}>
  <p>Posts tagged with {tag}</p>
  <table>
  <thead>
    <tr>
      <th>Date</th>
      <th>Post</th>
    </tr>
  </thead>
  <tbody>
    {posts.map((post: any) =>
      <BlogPost
        url   = {post.url}
        title = {post.frontmatter.title}
        date  = {post.frontmatter.pubDate}/>
    )}
  </tbody>
  </table>
</BaseLayout>